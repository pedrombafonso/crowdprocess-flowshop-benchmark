iterationNumber = 0;

function in_array(givenArray, p_val) {
	for(var i = 0, l = givenArray.length; i < l; i++) {
		if(givenArray[i] == p_val) {
			return true;
		}
	}
	return false;
}

(function(){
var timesObject = {};
 /*    var timesObject = [
[54, 79, 16, 66, 58], 
[83, 3, 89, 58, 56], 
[15, 11, 49, 31, 20], 
[71, 99, 15, 68, 85], 
[77, 56, 89, 78, 53], 
[36, 70, 45, 91, 35], 
[53, 99, 60, 13, 53], 
[38, 60, 23, 59, 41], 
[27, 5, 57, 49, 69], 
[87, 56, 64, 85, 13], 
[76, 3, 7, 85, 86], 
[91, 61, 1, 9, 72], 
[14, 73, 63, 39, 8], 
[29, 75, 41, 41, 49], 
[12, 47, 63, 56, 47], 
[77, 14, 47, 40, 87], 
[32, 21, 26, 54, 58], 
[87, 86, 75, 77, 18], 
[68, 5, 77, 51, 68], 
[94, 77, 40, 31, 28]
]; /*

	
    /**
     * Algorytm genetyczny
     */
	Flowshop.initialize({
		machines : 5,
		jobs : 20,
		membersCount : 20
	});
	
	/*
	 * Iterating through machines
	 * give time of job on machine
	 */
	(function() {
		for(var j = 0; j < Flowshop.data.machines; j++) {
			timesObject[j] = {};
			for(var k = 0; k < Flowshop.data.jobs; k++) {
				timesObject[j][k] = ~~(Math.random()*100)
			}
		}
	})();
	
	Flowshop.data.times = timesObject; // machines -> jobs
	
    $(document).ready(function() {
    	var	i = 0;
    		firstPopulation = Flowshop.makePopulation(),
    		newPopulation = null,
    		maxIteration = 1000,
    		intervalObj = null,
    		timeout = 200;

		socket.on('newBestMember', function (data) {
			console.log(data);
			Flowshop.checkIfBestThenInsert(data);
		});
		
		iterationNumber++;
		
    	for(i = 0; i < Flowshop.data.membersCount; i++) {
    		firstPopulation.makeNewMember();
    	}
    	
    	intervalObj = setInterval(function() {
        	iterationNumber++;
        	if(iterationNumber === maxIteration) {
        		clearInterval(intervalObj);
        		$('#content').append($('<div></div>').html('END'));
        	}
    		var i = 0,
    			parentPopulation = (newPopulation === null) ? firstPopulation : newPopulation,
    			childrenPopulation = Flowshop.makePopulation();
    		
        	for(i; i < Flowshop.data.membersCount/2; i++) {
        		childrenPopulation.insertMember(parentPopulation.makeChildren());
        	}
        	for(i; i < Flowshop.data.membersCount-1; i++) {
        		childrenPopulation.makeNewMember();
        	}
        	childrenPopulation.insertMember(Flowshop.data.bestMember);
        	
        	newPopulation = childrenPopulation;
    	}, timeout);
	});
})();